struct Node {
    data: i64
    next: Node?
}

struct allocator CircularList {
    node: Node?

    fun new() -> CircularList {
        return new CircularList(node: none)
    }

    fun push(mut self, data: i64) {
        if .node != none {
            let next = self.node.next
            self.node.next = new Node(data, next)
        } else {
            self.node = new Node(data, none)
            self.node.next = self.node
        }
    }

    fun next(mut self) -> i64 {
        if self.node.is_some() {
            let ret = self.node.data

            self.node = self.node.next
            return ret
        } else {
            return none
        }
    }
}

fun helper() -> CircularList {
    let list = new CircularList()

    return list // error, list does not live long enough
}

fun main() {
    mut list = new CircularList()

    // list.push(1)
    // list.push(2)
    // list.push(3)

    // println(list.next())
    // println(list.next())
    // println(list.next())
}